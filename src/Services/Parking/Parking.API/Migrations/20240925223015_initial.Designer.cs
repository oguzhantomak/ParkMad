// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parking.API.Data;

#nullable disable

namespace Parking.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925223015_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Parking.API.Models.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OccupiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("ParkingSpots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsOccupied = false,
                            VehicleSize = 0,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsOccupied = false,
                            VehicleSize = 1,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsOccupied = false,
                            VehicleSize = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsOccupied = true,
                            VehicleSize = 0,
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 5,
                            IsOccupied = true,
                            VehicleSize = 1,
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 6,
                            IsOccupied = false,
                            VehicleSize = 2,
                            ZoneId = 3
                        });
                });

            modelBuilder.Entity("Parking.API.Models.Entities.ParkingZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ParkingZones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1,
                            Name = "Zone A",
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            Name = "Zone B",
                            VehicleSize = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 3,
                            Name = "Zone C",
                            VehicleSize = 2
                        });
                });

            modelBuilder.Entity("Parking.API.Models.Entities.ParkingSpot", b =>
                {
                    b.HasOne("Parking.API.Models.Entities.ParkingZone", "Zone")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Parking.API.Models.Entities.ParkingZone", b =>
                {
                    b.Navigation("ParkingSpots");
                });
#pragma warning restore 612, 618
        }
    }
}
